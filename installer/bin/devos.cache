#!/usr/bin/env bash

# shellcheck source=devos
# shellcheck source=devos.static
source "devos.static"

cache.del() {
  cache._validate
  mkdir -p "$vSTATIC_MY_CONFIG_ROOT/.cache"
  local tmp_filepath="$vSTATIC_MY_CONFIG_ROOT/.cache/$1"
  rm -f "$tmp_filepath"
}
cache.clear() {
  cache._validate
  mkdir -p "$vSTATIC_MY_CONFIG_ROOT/.cache"
  rm -rf "$vSTATIC_MY_CONFIG_ROOT/.cache"
}
#
# Important: this follows the same pattern as how we curl api endpoints.
# We store the response in a global variable and then use the global var on subsequent lines.
# While this feels like a shitty way to do this, it's actually quite nice AS LONG AS
# there's only one way to "get" things in a particular category of functions.
#
cache.get() {
  cache._validate
  mkdir -p "$vSTATIC_MY_CONFIG_ROOT/.cache"
  local tmp_filepath="$vSTATIC_MY_CONFIG_ROOT/.cache/$1"
  if [ -f "$tmp_filepath" ]; then
    cat "$tmp_filepath"
  else
    echo ""
  fi
}
cache.set() {
  cache._validate
  mkdir -p "$vSTATIC_MY_CONFIG_ROOT/.cache"
  local tmp_filepath="$vSTATIC_MY_CONFIG_ROOT/.cache/$1"
  if [ ! -f "$tmp_filepath" ]; then
    touch "$tmp_filepath"
  fi
  echo "$2" >"$tmp_filepath"
}
cache.prompt() {
  cache._validate
  mkdir -p "$vSTATIC_MY_CONFIG_ROOT/.cache"
  local input
  input="$(cache.get "$1")"
  if [ -z "$input" ]; then
    echo "Enter the $1:"
    read -r input
    if [ -z "$input" ]; then
      log.error "the $1 cannot be empty. Exiting."
      exit 1
    fi
    cache.set "$1" "$input"
  fi
  cache.get "$1"
}
cache.overwrite_on_empty() {
  cache._validate
  mkdir -p "$vSTATIC_MY_CONFIG_ROOT/.cache"
  local cached_val
  cached_val="$(cache.get "$1")"
  local next_val="$2"
  if [ -z "$cached_val" ]; then
    cache.set "$1" "$next_val"
  fi
  cache.get "$1"
}
