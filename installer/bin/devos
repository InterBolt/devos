#!/usr/bin/env bash
# shellcheck disable=SC2155
# shellcheck disable=SC2115
set -o errexit
set -o pipefail
set -o errtrace

cd "$(dirname "${BASH_SOURCE[0]}")"
vMY_DIR="$(pwd)"
vDEBUG_LEVEL=${DEBUG_LEVEL:-0}
#
# These variables are shared between this script AND every helper script
# in the installer/bin directory.
#
# shellcheck source=devos.static
source "devos.static"
#
# `dotglob` option ensures that dotfiles and folders are included when using globs.
# Helpful for looping through files in a directory.
#
shopt -s dotglob
# --------------------------------------------------------------------------------------------
#
# RESPONSE/RETURN SLOTS
#
vPREV_CURL=""
vPREV_RETURN=()
# --------------------------------------------------------------------------------------------
#
# STATUSES:
#
# These are used to keep track of various statuses, like "did the bootstrap complete"
#
vSTATUS_BOOTSTRAPPED_POSTGRES="bootstrapped-remote-postgres"
vSTATUS_BOOTSTRAPPED_REMOTE="bootstrapped-remote"
vSTATUS_LAUNCH_SUCCEEDED="successful-run"
# --------------------------------------------------------------------------------------------
#
# SOURCE SCRIPTS
#
# Think of these like libraries.
# Except they are tightly coupled to the variables defined in this script.
#
# shellcheck source=shared.log.sh
source "shared.log.sh"
log.ready "cli"
#
# Now source all the things we need.
#
# shellcheck source=devos.cache
source "devos.cache"
# shellcheck source=devos.flags
source "devos.flags"
# shellcheck source=devos.ssh
source "devos.ssh"
# shellcheck source=devos.status
source "devos.status"
# shellcheck source=devos.utils
source "devos.utils"
# shellcheck source=devos.vultr
source "devos.vultr"
#
# Return to the previous directory just in case.
#
cd "$vMY_DIR"
#
# --------------------------------------------------------------------------------------------
#
# OPTIONS DERIVED FROM THE CLI
#
vCLI_ALLOWED_CMDS=()
vCLI_ALLOWED_BASE_OPTIONS=()
vCLI_ALLOWED_CMD_OPTIONS=()
vCLI_PARSED_BASE_OPTIONS=()
vCLI_PARSED_CMD=""
vCLI_PARSED_CMD_ARG=""
vCLI_PARSED_CMD_OPTIONS=()
vCLI_OPT_HARD_RESET=false
vCLI_OPT_CLEAR_CACHE=false
vCLI_OPT_TAG=""
vCLI_OPT_DIR=""
# --------------------------------------------------------------------------------------------
#
# config that get passed to each environment.
#
# shellcheck disable=SC2034
vENV_OPENAI_API_KEY=""
# shellcheck disable=SC2034
vENV_VULTR_API_KEY=""
# shellcheck disable=SC2034
vENV_CLOUDFLARE_API_TOKEN=""
# shellcheck disable=SC2034
vENV_GITHUB_TOKEN=""
# shellcheck disable=SC2034
vENV_IP=""
# shellcheck disable=SC2034
vENV_VULTR_S3_HOST=""
# shellcheck disable=SC2034
vENV_VULTR_S3_OBJECT_STORE=""
# shellcheck disable=SC2034
vENV_VULTR_S3_ACCESS_KEY=""
# shellcheck disable=SC2034
vENV_VULTR_S3_SECRET=""
# shellcheck disable=SC2034
vENV_GITHUB_USERNAME=""
# shellcheck disable=SC2034
vENV_GITHUB_EMAIL=""
# shellcheck disable=SC2034
vENV_CAPROVER_PASSWORD=""
# shellcheck disable=SC2034
vENV_POSTGRES_PASSWORD=""
# shellcheck disable=SC2034
vENV_CAPROVER_NAME="interbolt"
# shellcheck disable=SC2034
vENV_ROOT_DOMAIN="interbolt.org"
# shellcheck disable=SC2034
vENV_CAPROVER_SUBDOMAIN="server"
# shellcheck disable=SC2034
vENV_DEBIAN_NODE_VERSION="20.11.1"
# shellcheck disable=SC2034
vENV_DB_USER="devos"
# shellcheck disable=SC2034
vENV_DB_NAME="manager"
# shellcheck disable=SC2034
vENV_DB_PORT=5432
# --------------------------------------------------------------------------------------------
#
# TRAPPING LOGIC
#
# This is where we set up the error trapping logic.
# When I first created this all it did was log global variables.
#
if ! declare -f utils.exit_trap >/dev/null; then
  log.error "utils.exit_trap is not a defined function. Exiting."
  exit 1
fi
trap "utils.exit_trap" EXIT
# --------------------------------------------------------------------------------------------
#
# STATE GETTERS/SETTERS
#
# These functions are used to operate on global state.
# EX: if we decide we need some value to persist between runs, we can
# easily modify the getter/setter implentation to use a file as a cache
#
state.map_parsed_cli() {
  if [ -z "$vCLI_PARSED_CMD" ]; then
    log.error "No command supplied. Please supply a command."
    exit 1
  fi
  for i in "${!vCLI_PARSED_CMD_OPTIONS[@]}"; do
    case "${vCLI_PARSED_CMD_OPTIONS[$i]}" in
    "--hard-reset")
      vCLI_OPT_HARD_RESET=true
      log.debug "set \$vCLI_OPT_HARD_RESET= $vCLI_OPT_HARD_RESET"
      ;;
    --dir=*)
      supplied_val="${vCLI_PARSED_CMD_OPTIONS[$i]#*=}"
      if [ "$supplied_val" == "$HOME" ]; then
        log.error "Danger: --dir flag cannot be set to the home directory. Exiting."
        exit 1
      fi
      if [[ "$HOME" == "$supplied_val"* ]]; then
        log.error "Danger: --dir flag cannot be set to a parent directory of the home directory. Exiting."
        exit 1
      fi
      vCLI_OPT_DIR="$val"
      log.debug "set \$vCLI_OPT_DIR= $vCLI_OPT_DIR"
      ;;
    --tag=*)
      val="${vCLI_PARSED_CMD_OPTIONS[$i]#*=}"
      if [ -n "$val" ]; then
        vCLI_OPT_TAG="$val"
        log.debug "set \$vCLI_OPT_TAG= $vCLI_OPT_TAG"
      fi
      ;;
    "--clear-cache")
      vCLI_OPT_CLEAR_CACHE=true
      log.debug "set \$vCLI_OPT_CLEAR_CACHE= $vCLI_OPT_CLEAR_CACHE"
      ;;
    esac
  done
}
# --------------------------------------------------------------------------------------------
#
# TESTS
#
test.check_global_variables_used() {
  local entry_pwd="$PWD"
  cd "$vMY_DIR"
  local errored=false
  local files
  files=$(find . -type f -name "devos*")
  for file in $files; do
    local global_vars
    global_vars=$(grep -o -w '^$*v[A-Z_]\+' "$file" | grep -v "#" || echo "")
    for global_var in $global_vars; do
      local result="$(declare -p "$global_var" &>/dev/null && echo "set" || echo "unset")"
      if [ "$result" == "unset" ]; then
        log.error "Uknown variable: $global_var used in $file"
        errored=true
      fi
    done
  done
  if [ "$errored" == true ]; then
    exit 1
  else
    log.debug "test passed: variables used in libs are all defined."
  fi
  cd "$entry_pwd"
}
test.verify_template_variables_in_bootfiles() {
  local entry_pwd="$PWD"
  #
  # Makes the most sense to run each test section from the repo root
  #
  cd "$vSTATIC_RUNNING_REPO_ROOT"
  #
  # Checks if the variables (eg __SOME_VAR__) in the bootfile templates are valid.
  #
  local bootfiles_dir="$vSTATIC_RUNNING_REPO_ROOT/$vSTATIC_REPO_BOOTFILES_DIR"
  utils.template_variables "$bootfiles_dir" "dry" "allow_empty"
  log.debug "test passed: template variables in bootfiles are valid"
  cd "$entry_pwd"
}
# --------------------------------------------------------------------------------------------
#
# COMMAND ENTRY FUNCTIONS
#
cmd.launch() {
  #
  # Loops through a bunch of commands we know we'll need so the
  # user can install them before running the script.
  #
  for cmd in "${vSTATIC_DEPENDENCY_COMMANDS[@]}"; do
    if ! command -v "$cmd" &>/dev/null; then
      log.error "pre-check failed. Install \"$cmd\" to your path and try again."
      exit 1
    fi
  done
  #
  # Yes, this is done in the flag parsing/mapping too
  # but I'm doing the check twice to prevent disaster.
  #
  if [ "$vCLI_OPT_DIR" == "$HOME" ]; then
    log.error "Danger: you are trying to wipe the home directory. Exiting."
    exit 1
  fi
  if [[ "$HOME" == "$vCLI_OPT_DIR"* ]]; then
    log.error "Danger: you are trying to wipe a parent directory of your home directory. Exiting."
    exit 1
  fi
  if [ "$vCLI_OPT_HARD_RESET" == true ]; then
    #
    # when doing a hard reset, we should always expect
    # that the dir provided via the cli or static vars is
    # a valid `devos` folder. And if not, we throw.
    #
    if [ ! -d "$vCLI_OPT_DIR" ]; then
      log.error "Invalid directory supplied for --dir flag: $vCLI_OPT_DIR. Exiting."
      exit 1
    fi
    if [ ! -f "$vCLI_OPT_DIR/.devos" ]; then
      log.error "The supplied directory does not contain a .devos file. Exiting."
      exit 1
    fi
    log.warn "HARD RESET: ${vCLI_OPT_DIR} in 5 seconds."
    sleep 3
    log.warn "DELETING: ${vCLI_OPT_DIR} in 2 seconds."
    sleep 2
    rm -rf "$vCLI_OPT_DIR"
    log.warn "wiped and created empty dir: $vCLI_OPT_DIR"
  fi
  #
  # On the other hand, if we're not hard reseting, we should
  # only operate on a PRE-EXISTING `devos` folder if it has
  # a `.devos` file in it.
  #
  if [ ! -d "$vCLI_OPT_DIR" ]; then
    mkdir -p "$vCLI_OPT_DIR"
    log.info "created: $vCLI_OPT_DIR"
    date +%s >"$vCLI_OPT_DIR/.devos"
    log.debug "created: $vCLI_OPT_DIR/.devos"
  elif [ ! -f "$vCLI_OPT_DIR/.devos" ]; then
    log.error "The supplied directory does not contain a .devos file. Exiting."
    exit 1
  fi
  #
  # I might regret this but warn only.
  # Full idempotency is worth it.
  #
  last_successful_run="$(status.get "$vSTATUS_LAUNCH_SUCCEEDED")"
  if [ -n "$last_successful_run" ]; then
    log.warn "the last successful run was at: $last_successful_run"
  fi
  #
  # Generate and collect things like the caprover password, postgres passwords.
  # api keys, etc.
  # Note: do not regenerate new passwords on subsequent runs unless we explicitly break
  # the cache or a force a hard reset.
  #
  local expects_these_things=(
    "vENV_CAPROVER_PASSWORD"
    "vENV_POSTGRES_PASSWORD"
    "vENV_GITHUB_USERNAME"
    "vENV_GITHUB_EMAIL"
    "vENV_GITHUB_TOKEN"
    "vENV_OPENAI_API_KEY"
    "vENV_VULTR_API_KEY"
    "vENV_CLOUDFLARE_API_TOKEN"
  )
  # ------------------------------------------------------------------------------------------------------------
  vENV_CAPROVER_PASSWORD="$(cache.overwrite_on_empty "vENV_CAPROVER_PASSWORD" "$(openssl rand -base64 32 | tr -dc 'a-z0-9' | head -c 32)")"
  log.debug "set \$vENV_CAPROVER_PASSWORD= $vENV_CAPROVER_PASSWORD"
  # ------------------------------------------------------------------------------------------------------------
  vENV_POSTGRES_PASSWORD="$(cache.overwrite_on_empty "vENV_POSTGRES_PASSWORD" "$(openssl rand -base64 32 | tr -dc 'a-z0-9' | head -c 32)")"
  log.debug "set \$vENV_POSTGRES_PASSWORD= $vENV_POSTGRES_PASSWORD"
  # ------------------------------------------------------------------------------------------------------------
  vENV_GITHUB_USERNAME="$(cache.overwrite_on_empty "vENV_GITHUB_USERNAME" "$(git config -l | grep user.name | cut -d = -f 2)")"
  log.debug "set \$vENV_GITHUB_USERNAME= $vENV_GITHUB_USERNAME"
  # ------------------------------------------------------------------------------------------------------------
  vENV_GITHUB_EMAIL="$(cache.overwrite_on_empty "vENV_GITHUB_EMAIL" "$(git config -l | grep user.email | cut -d = -f 2)")"
  log.debug "set \$vENV_GITHUB_EMAIL= $vENV_GITHUB_EMAIL"
  # ------------------------------------------------------------------------------------------------------------
  vENV_GITHUB_TOKEN="$(cache.prompt "vENV_GITHUB_TOKEN")"
  log.debug "set \$vENV_GITHUB_TOKEN= $vENV_GITHUB_TOKEN"
  # ------------------------------------------------------------------------------------------------------------
  vENV_OPENAI_API_KEY="$(cache.prompt "vENV_OPENAI_API_KEY")"
  log.debug "set \$vENV_OPENAI_API_KEY= $vENV_OPENAI_API_KEY"
  # ------------------------------------------------------------------------------------------------------------
  vENV_VULTR_API_KEY="$(cache.prompt "vENV_VULTR_API_KEY")"
  log.debug "set \$vENV_VULTR_API_KEY= $vENV_VULTR_API_KEY"
  # ------------------------------------------------------------------------------------------------------------
  vENV_CLOUDFLARE_API_TOKEN="$(cache.prompt "vENV_CLOUDFLARE_API_TOKEN")"
  log.debug "set \$vENV_CLOUDFLARE_API_TOKEN= $vENV_CLOUDFLARE_API_TOKEN"
  # ------------------------------------------------------------------------------------------------------------
  for i in "${!expects_these_things[@]}"; do
    if [ -z "${!expects_these_things[$i]}" ]; then
      log.error "${expects_these_things[$i]} is empty. Exiting."
      exit 1
    fi
  done
  for file in "${vSTATIC_REPO_BOOTFILES[@]}"; do
    rm -f "$vCLI_OPT_DIR/bootfiles/$file"
    wget --quiet --header="Cache-Control: no-cache" "https://raw.githubusercontent.com/InterBolt/devos/main/$vSTATIC_REPO_BOOTFILES_DIR/$file" -O "$vCLI_OPT_DIR/bootfiles/$file"
    if [ "$(head -n 1 "$vCLI_OPT_DIR/bootfiles/$file" | cut -c1-2)" == "#!" ]; then
      chmod +x "$vCLI_OPT_DIR/bootfiles/$file"
    fi
    #
    # throw and remove any files that don't have valid variables.
    #
    if ! utils.template_variables "$vCLI_OPT_DIR/bootfiles/$file" "dry" 2>&1; then
      log.exit "bad variables used in: $vCLI_OPT_DIR/bootfiles/$file"
      exit 1
    fi
    log.info "downloaded: $vCLI_OPT_DIR/bootfiles/$file"
  done
  if [ ! -d "$vCLI_OPT_DIR/.ssh" ]; then
    mkdir -p "$vCLI_OPT_DIR/.ssh"
    log.info "created: $vCLI_OPT_DIR/.ssh"
    log.info "created: $vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_CONFIG_FILENAME with placeholders."
    ssh-keygen -t rsa -q -f "$vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_RSA_KEYNAME" -N ""
    log.info "created private key: $vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_RSA_KEYNAME, public key: $vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_PUB_KEYNAME"
    cat "$vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_PUB_KEYNAME" >"$vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_AUTHORIZED_KEYS_FILENAME"
    log.info "created $vSTATIC_SSH_AUTHORIZED_KEYS_FILENAME: $vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_AUTHORIZED_KEYS_FILENAME"
  fi
  chmod 644 "$vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_AUTHORIZED_KEYS_FILENAME"
  log.debug "updated permissions: chmod 644 - $vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_AUTHORIZED_KEYS_FILENAME"
  chmod 644 "$vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_PUB_KEYNAME"
  log.debug "updated permissions: chmod 644 - $vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_PUB_KEYNAME"
  chmod 644 "$vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_CONFIG_FILENAME"
  log.debug "updated permissions: chmod 644 - $vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_CONFIG_FILENAME"
  chmod 600 "$vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_RSA_KEYNAME"
  log.debug "updated permissions: chmod 600 - $vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_RSA_KEYNAME"
  #
  # Now that our SSH keys are ready, let us provision vultr stuff.
  # It's possible that that stuff is already provisioned, in which case
  # the provisioning subtasks should return early and would mean we won't have a ip to purge.
  #
  vultr.s3.provision
  log.success "vultr object storage is ready"
  #
  # prev_id is NOT the same as old_ip.
  # when prev_id is set and is associated with a matching
  # ssh key, we "promote" it to vENV_IP and skip
  # much (or all) of the vultr provisioning process.
  #
  if [ -n "${prev_ip}" ]; then
    log.info "the ip: $prev_ip from a previous run was found. will try not to re-install vultr instances."
  fi
  vultr.compute.provision "$prev_ip"
  log.success "vultr compute is ready"
  if [ -z "$vENV_IP" ]; then
    log.error "something went wrong. \$vENV_IP is empty."
    exit 1
  fi
  if [ "$vENV_IP" != "$prev_ip" ]; then
    cache.set "old_ip" "$prev_ip"
  else
    #
    # If we detected that the ip did NOT chang after vultr provisioning, we must
    # clear the current old_ip value. Not doing so would cause the
    # the current vultr instance to be deleted at the end of this script.
    #
    cache.del "old_ip"
  fi
  #
  # Replace the .env file with all vENV_ variables in this script.
  # Will produce an .env file where vENV_IP=127.0.0.1 results in:
  # ```.env
  # ENV_IP=127.0.0.1
  # ```
  #
  rm -f "$vCLI_OPT_DIR/$vSTATIC_ENV_FILENAME"
  local env_vars=$(grep -o -w 'vENV_[A-Z_]\+' "$vMY_DIR/devos")
  for env_var in $env_vars; do
    local result="$(declare -p "$env_var" &>/dev/null && echo "set" || echo "unset")"
    if [ "$result" == "unset" ]; then
      log.error "Undefined env var: $env_var used in devos main script."
      exit 1
    else
      local env_val=${!env_var}
      if [ -z "$env_val" ]; then
        log.error "$env_var cannot be empty when building the .env file."
        exit 1
      fi
      local env_name=$(echo "$env_var" | sed 's/vENV_/ENV_/g' | tr '[:lower:]' '[:upper:]')
      local found="$(grep -q "^$env_name=" "$vCLI_OPT_DIR/$vSTATIC_ENV_FILENAME" &>/dev/null && echo "found" || echo "")"
      if [ -z "$found" ]; then
        echo "$env_name=$env_val" >>"$vCLI_OPT_DIR/$vSTATIC_ENV_FILENAME"
        echo "export $env_name=\"$env_val\"" >>"$vCLI_OPT_DIR/$vSTATIC_ENV_SH_FILENAME"
      fi
    fi
  done
  {
    echo "Host 127.0.0.1"
    echo "  HostName 127.0.0.1"
    echo "  User root"
    echo "  IdentityFile $vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_RSA_KEYNAME"
    echo "  Port 2222"
    echo ""
    echo ""
    echo "Host $vENV_IP"
    echo "  HostName $vENV_IP"
    echo "  User root"
    echo "  IdentityFile $vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_RSA_KEYNAME"
  } >"$vCLI_OPT_DIR/.ssh/$vSTATIC_SSH_CONFIG_FILENAME"
  #
  # Checkpoint: once we're here, it's reasonable to assume
  # that any variables we need to be set are set. That means
  # we can inject them into downloaded/generated source files.
  #
  utils.template_variables "$vCLI_OPT_DIR" "commit"
  log.info "injected vars into source files."
  #
  # Build and start the local docker container.
  # Warning: this will recreate the container on each run.
  #
  # The compose.yml file that drives this mounts the ENTIRE devos folder as a volume.
  #
  docker compose --file compose.yml up --force-recreate --build --remove-orphans --detach
  #
  # Upload the env files to both the local and remote.
  # You'd be right to think the local docker container doesn't
  # actually need this file. But for mental consistency until I
  # figure something better out, let's ensure the .env file is
  # present in each debian environment's root folder.
  #
  log.info "docker container is ready"
  ssh.cmd.local "mkdir -p /root/workspace"
  ssh.rsync_up.local "$vCLI_OPT_DIR/$vSTATIC_ENV_FILENAME" "/root/workspace/"
  ssh.rsync_up.local "$vCLI_OPT_DIR/$vSTATIC_ENV_SH_FILENAME" "/root/workspace/"
  log.info "uploaded env files local docker container: /root/workspace/$vSTATIC_ENV_SH_FILENAME"
  ssh.cmd.remote "mkdir -p /root/workspace"
  ssh.rsync_up.remote "$vCLI_OPT_DIR/$vSTATIC_ENV_FILENAME" "/root/workspace/"
  ssh.rsync_up.remote "$vCLI_OPT_DIR/$vSTATIC_ENV_SH_FILENAME" "/root/workspace/"
  log.info "uploaded env files remote server: /root/workspace/$vSTATIC_ENV_SH_FILENAME"
  ssh.rsync_up.remote "$$vCLI_OPT_DIR/$vSTATIC_BOOTSTRAP_SH" "/root/workspace/"
  log.info "uploaded $vSTATIC_BOOTSTRAP_SH remote server"
  ssh.cmd.remote "chmod +x /root/$vSTATIC_BOOTSTRAP_SH"
  log.info "updated permissions: chmod +x /root/workspace/$vSTATIC_BOOTSTRAP_SH"
  #
  # Create the folder where we'll store out caprover
  # deployment tar files.
  #
  ssh.cmd.remote "mkdir -p /root/deployments"
  log.info "created remote deployment dir: /root/deployments"
  #
  # Note: the bootstrapping script should be idempotent but it's still
  # a long ass script so I like the ability to skip it. Also, the downsides of not re-running
  # are mitigated by the fact that every script that contributes to the bootstrapping
  # is available via an aliased command.
  #
  timestamp_of_remote_bootstrap="$(status.get "$vSTATUS_BOOTSTRAPPED_REMOTE")"
  if [ -n "$timestamp_of_remote_bootstrap" ]; then
    log.warn "skipping first remote bootstrap script - previously completed at $timestamp_of_remote_bootstrap"
  else
    #
    # The remote server will not have our entire workspace mounted.
    # So we need to individually upload files we'll need.
    # Starting with the .env file we built earlier.
    #
    ssh.cmd.remote "/root/workspace/$vSTATIC_BOOTSTRAP_SH"
    status.set "$vSTATUS_BOOTSTRAPPED_REMOTE" "$(utils.date)"
    log.info "bootstrapped the remote server."
  fi
  timestamp_of_postgres_bootstrap="$(status.get "$vSTATUS_BOOTSTRAPPED_POSTGRES")"
  if [ -n "$timestamp_of_postgres_bootstrap" ]; then
    log.warn "skipping all postgres bootstrap - previously completed at $timestamp_of_postgres_bootstrap"
  else
    ssh.rsync_down.remote "$vSTATIC_DEBIAN_CLONE_DIR/$vSTATIC_DB_ONE_CLICK_TEMPLATE_FILENAME" "$vCLI_OPT_DIR/"
    log.info "downloaded caprover one-click-app template."
    utils.echo_line
    echo ""
    cat "$vCLI_OPT_DIR/$vSTATIC_DB_ONE_CLICK_TEMPLATE_FILENAME"
    echo ""
    utils.echo_line
    echo "Setup the caprover Postgres database and hit enter."
    read -r
    #
    # This ensures that we will skip all of the remote bootstrapping logic on subsequent runs.
    #
    status.set "$vSTATUS_BOOTSTRAPPED_REMOTE" "$(utils.date)"
  fi
  #
  # The logic here is simpler because the bootstrap script for the docker container
  # will never deal with things like databases or service orchestration.
  #
  ssh.cmd.local "$STORE_TARGET_NAMED_BOOTSTRAP_SH_FILE"
  log.info "bootstrapped the local docker container."
  #
  # This is redundant, but it's a good safety check because
  # if something bad happened and the old ip is the same as the current
  # we'll end up destroying the current instance. Yikes.
  #
  if [ "$(cache.get "old_ip")" == "$vENV_IP" ]; then
    log.error "The old and active ip's should never be the same! Skipping to avoid a disaster."
    exit 1
  fi
  #
  # The active ip should never be empty.
  #
  if [ -z "$vENV_IP" ]; then
    log.error "expected \$vENV_IP to be non-empty. Exiting"
    exit 1
  fi
  if [ -z "$(cache.get "old_ip")" ]; then
    #
    # Common if the user is installing for the first time.
    #
    log.info "no old ip found. skipping the purge process."
  else
    #
    # If the user is re-installing, we want to make sure we don't leave behind an errant ip addresses throughout
    # the installation folder, or that we don't leave dangling vultr resources
    #
    find "$vCLI_OPT_DIR" -type f -exec sed -i 's/'"$(cache.get "old_ip")"'/'"${vENV_IP}"'/g' {} \;
    log.info "replaced $(cache.get "old_ip") with $vENV_IP in all files for extra safety."
    log.warn "waiting 5 seconds before destroying the previous instance!"
    sleep 5
    vultr.compute.destroy_instance "$(vultr.compute.get_instance_id_from_ip "$(cache.get "old_ip")")"
    log.info "destroyed the previous instance with ip: $(cache.get "old_ip")"
  fi
  status.set "$vSTATUS_LAUNCH_SUCCEEDED" "$(utils.date)"
}
cmd.code() {
  if ! command -v "code" &>/dev/null; then
    log.error "vscode is not installed to your path. cannot continue."
  fi
  log.warn "would open vscode"
}
cmd.restore() {
  log.warn "would restore the backup with name $vCLI_OPT_TAG"
}
cmd.backup() {
  log.warn "would backup the current instance with name $vCLI_OPT_TAG"
}
cmd.test() {
  if [ "$vSTATIC_RUNNING_IN_GIT_REPO" == "true" ]; then
    test.check_global_variables_used
    test.verify_template_variables_in_bootfiles
  else
    log.error "this command can only be run from within a git repo."
    exit 1
  fi
}
# --------------------------------------------------------------------------------------------
#
# ENTRY
#
# parse the cli args and validate them.
#
flags.parse_requirements
flags.parse_cmd "$@"
flags.validate
#
# We seperate the parsing and mapping concerns so that
# frequent changes to business logic don't affect the parsing logic
#
state.map_parsed_cli
if [ -z "$vCLI_OPT_DIR" ]; then
  log.error "--dir is required. Exiting."
  exit 1
fi
#
# Before doing ANYTHING, check that our command actually works.
# Fail fast!
#
if ! command -v "cmd.$vCLI_PARSED_CMD" &>/dev/null; then
  log.error "cmd.$vCLI_PARSED_CMD is not defined. Exiting."
  exit 1
fi
#
# We're only allowed to clear cache files associated with a particular named installation.
#
if [ "$vCLI_OPT_CLEAR_CACHE" == "true" ]; then
  state.clear.cache
fi
#
# Run the command specified in the cli args.
#
"cmd.$vCLI_PARSED_CMD"
